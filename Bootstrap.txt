 "Pull Request" - это запрос на интеграцию изменений из одной ветки в другую. Причем в ветке может быть всего один коммит одного разработчика, а может быть несколько коммитов разных авторов. В большинстве случаев пул-реквест используется для интеграции нового функционала или для исправления бага в основной ветке проекта.
 Pull Request также содержит короткое описание изменений и причин, по которым эти изменения вносятся. Обычно между автором пул-реквеста и ревьюерами происходит обсуждение этих изменений.
 Pull Request облегчают процесс совместной работы с другими людьми. Они позволяют сделать прозрачной коммуникацию между авторами и ревьюерами путем показа дифф-ов (diffs), коммитов (commits) и комментариев, поясняющих изменения. Преимущество процедуры пул-реквестов в том, что всем сотрудникам видна вся коммуникация по изменениям. Поиск по внесенным изменениям и возможность использовать теги. В общем, отслеживать происходящее относительно легко. Контекст и предыдущие решения не теряются где-то в потоках электронных писем или окнах чатов. Любой разработчик, участвующий в проекте, может легко найти и просмотреть нужные сведения.

gitlab Merge Request — позволяет перед коммитом в master ветку отправить внесенные изменения другим разработчикам проекта, это аналог pull request в git. merge request позволяет предотвратить внесение некорректных изменений, которые сломают проект.
Merge Request и Pull Request это один и тот же функционал, который в разных репозитариях просто называется по разному. И то и другое обозначает один и тот же процесс, в GitHub и Bitbucket называют операцию pull request, потому что первое действие, которое совершит человек, который будет вливать себе правки из request это git pull, тогда как GitLab и Gitorious называют это действие merge request, потому что финальным действием будет слияние изменений (git merge)
 

                                                                                                                              

                                                                                                                                            Различие между    "Bootstrap 3 и Bootstrap 4"


Обе версии представляют собой мощный CSS-фреймворк для создания адаптивных страниц, который включает себя:

- многоколоночную адаптивную сетку;
- готовые элементы по типу навигации, кнопок, дропдаунов и т.д;
- набор служебных классов для управления поведением элементов;
- reset или normalize;
- настройки типографии в шаблоне;
- медиаобъекты;
- некоторые JS-плагины (Carousel, Modal и так далее);
- и многое другое.

Но, несмотря на практически идентичный набор компонентов и утилит, существуют огромные различия.

Список глобальных изменений в Bootstrap 4:

Смена Less на Sass в CSS файлах.
Смена px на rem в качестве единиц измерения в CSS.
Медиа-запросы теперь ems вместо pxs.
Размер шрифта увеличен с 14px до 16

* Исходный код Bootstrap 3 содержит перекомпилированный CSS, JavaScript, и шрифты, наряду с исходными Less, JavaScript и документацией.
* В Bootstrap v4.0.0-alpha, все файлы Less были заменены на Sass из-за миграции к Sass технологии через libSass. Так как Bootstrap 4 больше не поддерживает glyphicons, папку шрифтов тоже убрали.
* Здесь ничего нового; Bootstrap 3 использует те же самые классы. Тем не менее, классы Bootstrap 4 используют ems а не px, а также они добавили один новый дополнительный размер для очень больших экранов. Доступные классы вместе с их размерами экрана.

col-xl - очень большой экран (от 75em)
col-lg - большой экран (от 62em)
col-md - средний экран (от 48em)
col-sm - маленький экран (от 34em)
col-xs - очень маленький экран (менее 34em)

* В Bootstrap 3 мы использовали normalize.css для сброса стандартных стилей CSS, в Bootstrap 4 добавили улучшенную версию под названием reboot.css.
* В Bootstrap типографике используется rem. В отличие от px и em, они не являются фиксированными или относительными единицами измерения. Единицы измерения rem являются динамическими по отношению к корневому тегу HTML. Тем не менее, вы все еще можете использовать px, em и pt в своих Bootstrap проектах.
* Bootstrap 3 использовал контекстные классы для добавления цвета фона в строках таблицы или отдельных ячеек. В Bootstrap 4, добавили специальный префикс .table-* для каждого контекстного класса.
* В Bootstrap 3 мы использовали класс .table-condensed для создания более компактной таблицы, без отступов. В Bootstrap 4 переименовали данный класс в .table-sm.
* Еще одно нововведение в Bootstrap 4 это - технология flexbox. Flexbox позволяет контролировать размер, порядок и выравнивание элементов по нескольким осям, распределение свободного места между элементами и многое другое.

Для того, чтобы использовать Flexbox в своем проекте Bootstrap 4, установите переменную $enable-flex со значением true в файле _variables.scss и после компиляции, ваша сетка сразу же переключится на использование Flexbox модели.
